/**
 * @param {number} num
 * @return {number}
 */
var translateNum = function(num) {

    const str=String(num)
    
    // 好吧，与其说是DP，不如说是找规律题

    // dp[i]表示前i位数最多能表示的翻译方法

    // 对于123和1237,后者的最多翻译方式数=前者。
    // 123=>[1,2,3],[1,23],[12,3]
    // 1237=>[1,2,3,7],[1,23,7],[12,3,7],由于 37 不可以作为一个独立的数字，所以实际上1237的所有组合都依附于123，只是加上了一个末尾的7

    // 对于320和3209,后者的最多翻译方式数=前者。
    // 320=>[3,2,0],[3,20]
    // 3209=>[3,2,0,9],[3,20,9],由于 09 不可以作为一个独立的数字，所以实际上3209的所有组合都依附于320，只是加上了一个末尾的9

    // 对于321和3219,后者的最多翻译方式数=前者+32的翻译数
    // 321=>[3,2,1],[3,21]
    // 3219=>[3,2,1,9],[3,21,9]以及[3,2,19] 由于 19 可以作为一个独立的数字，所以除了“321的所有组合加上一个末尾的9"外，还可以对"32的组合加上19”

    const {length:n}=str
    let dp=new Array(n + 1);

    // 没有实际意义，只是作为i-1的值而存在
    dp[0]=1

    dp[1]=1

    // 用 str[i] 决定 dp[i+1] 
    for(let i=1;i<n;i++){
        const temp = Number(str[i - 1] + str[i]);

        if(temp >= 10 && temp <= 25){
            dp[i+1]=dp[i]+dp[i-1]
        }else{
            dp[i+1]=dp[i]
        }
    }

    return dp[n]

};
