// 背包：超时 
class Solution {
public:
    int n;
    vector<int>vec,temp;
    vector<vector<int>> res;
    set<vector<int>> se;
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        n=nums.size();
        for(int i=0;i<nums.size();i++){
            vec.push_back(nums[i]);
        }
        DFS(0,0,0);
        for(auto it=se.begin();it!=se.end();it++){
            res.push_back(*it);
        }
        return res;
    }
    
    void DFS(int index,int currentSum,int cnt){
        if(cnt==3&&currentSum==0){
            se.insert(temp);
            return;
        }
        if(index==n)
            return;
        if(cnt<=2){
            temp.push_back(vec[index]);
            DFS(index+1,currentSum+vec[index],cnt+1);
            temp.pop_back();
        }
        DFS(index+1,currentSum,cnt); 
    }
};

// 双指针
/**
 * 1. 数组排序
 * 2. L与R分别指向nums[i]的两端，sum大于0则R--，否则L++
 * 3. nums[i]=nums[i-1]，由于nums[i-1]的情况已统计过，再次统计nums[i]会使得结果中数组重复，故直接跳过nums[i-1]
 * 4. nums[i]大于 0，则三数之和必然无法等于 0，结束查找
 */
 class Solution {
    public static List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        int len = nums.length;
        if(nums == null || len < 3) return ans;
        Arrays.sort(nums); // 排序
        for (int i = 0; i < len ; i++) {
            if(nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环
            if(i > 0 && nums[i] == nums[i-1]) continue; // 去重
            int L = i+1;
            int R = len-1;
            while(L < R){
                int sum = nums[i] + nums[L] + nums[R];
                if(sum == 0){
                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));
                    while (L<R && nums[L] == nums[L+1]) L++; // 去重
                    while (L<R && nums[R] == nums[R-1]) R--; // 去重
                    L++;
                    R--;
                }
                else if (sum < 0){
                    
                    while (L<R && nums[L] == nums[L+1]) L++; // 去重
                    L++;
                    }
                else{
                    while (L<R && nums[R] == nums[R-1]) R--; // 去重
                    R--;
                }
            }
        }        
        return ans;
    }
}
